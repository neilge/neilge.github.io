<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[08-22-17]]></title>
    <url>%2F2017%2F08%2F22%2F08-22-17%2F</url>
    <content type="text"><![CDATA[让生活归于自己，不要把自己的喜怒哀乐寄托于其他人的身上。]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vi Cheatsheet]]></title>
    <url>%2F2017%2F08%2F16%2Fvim-cheatsheet%2F</url>
    <content type="text"><![CDATA[Please refer to this article if you want to get more details: Vim Cheat Sheet CommandsMoving Cusor w: jump forwards to the start of a word e: jump forwards to the end of a word b: jump backwards to the start of a word 0: jump to the start of the line $: jump to the end of the line gg: go to the first line of the document G: go to the last line of the document 5G: go to line 5 Ctrl + b: move back one full screen Ctrl + f: move forward one full screen Ctrl + d: move forward 1/2 a screen Ctrl + u: move back 1/2 a screen Editing u: undo Ctrl + r: redo SettingsMake vi editor display line number Press the Esc key if you are currently in insert or append mode. Press : (the colon). The cursor should reappear at the lower left corner of the screen next to a : prompt. Enter the following command: set number.]]></content>
      <tags>
        <tag>Vi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Blockchain]]></title>
    <url>%2F2017%2F08%2F12%2Fblockchain%2F</url>
    <content type="text"><![CDATA[What is Blockchian and BitcoinBitcoin is word that I heard frequently recent years, but I always do not have a chance to know what it is and how it works. At first I thoguth it is a “Geek Currency”, but after I watch some videos and read some articles, finally I found I am wrong, totally wrong. Bitcoin or blockchian more procisely, is a future technology, especially in fiancial or economic field. Nowadays, we store our money into banks, which is a centralized agency. We need to certificate ourself to get our own money. But with Bitcoins or other blockchain currency, our money is always in our hand and we do not need a third party cencorship agency to keep a look on our property or assets. In fact, blockchain is not only about curreny but can be appied into many other usage. The basic idea of blockchain is decentralization. There is no database to store the data and no central server to run the code. We can know something from the self-description of Ethereum, a new rising blockchain: Ethereum is a decentralized platform that runs smart contracts: applications that run exactly as programmed without any possibility of downtime, censorship, fraud or third party interference. Blockchain is a big revolution for the next generation of internet and some people love to call it WEB 3.0. I decided to dive myself into this field and learn things as fast as I can, so that I can catch up with this tide. Here are some useful website to spike:Glossary of blockchain]]></content>
      <tags>
        <tag>Blockchian</tag>
        <tag>Bitcoin</tag>
        <tag>Ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[08/10/17]]></title>
    <url>%2F2017%2F08%2F10%2F08-10-17%2F</url>
    <content type="text"><![CDATA[The good news is I finished setting up my personal tech blog using github.io and hexo. Finally, I have a safe place to put my knowledge and my experience in and the most awesome place is I can share my idea with others through this place. Hexo is awesome. I do not need to buy any server on cloud to deploy my code or buy database to store my data. Hexo helps me to avoid all these annoy things just by some simple cli and a github.io. Hexo also has varied themes and I choose the top1 pop theme called next. It is really elegant but powerful. I can change the highlight style of the code, add tagscloud and add a search function into it.But this is the end of good things. I have more troubles need to worry about. My time is limit but my tasks are accumulating and I did not find a sign that my work efficiency is improving. In fact, my issues can be concluded into two categories. One is communication problem, the other is skill problem. Communication is tough in a English speaking environment. I expected it would be hard, but I never thought it would be like this way. My listening becomes the most serious problem, because in many cases, I cannot understand what others are talking about and I need to guess what do they mean. The atomersphere of conversation become awkard just because I cannot understand what others are talking about and cannot get involved into the conversation. I hope my listening could be better by watching the TV shows and listening to Audible. But until now, the effect might not seems like much. I need to find a more efficient way to improve my speaking and listening. The other thing is my work efficiency is not as I expected. Not only because I spent too much time on setting up AUIserver, but I always feel tired when I just worked for a short of time. I think need more physical practice and get used to work in a long time. The other thing I can do is to remember some details in work or life intentionally. I am always tired of remember things, because I thought if it is important, it will repeat many times in the future and at that time, I must remember these things. However, if I do not remember them once on purpose, I will not remember it at next time I come cross it. I need to start remember something now and it is a good time, because I have already know which things are important enough for me to remember and which are not. This is enough for today. The next thing that I want to do is search some good methods to pick up listening and speaking for a foreign speaker.]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[English]]></title>
    <url>%2F2017%2F08%2F10%2Fenglish%2F</url>
    <content type="text"><![CDATA[This is a summary of the words and phrases that I come cross in the daily life, especially in TV series and books. Word inkling: a slight knowledge or suspicion; a hint. suspicion: a feeling or thought that something is possible, likely, or true. incorporate: take in or contain (something) as part of a whole; include. aside: a remark that is not directly related to the main topic of discussion. deliberate: done consciously and intentionally. caveat: a warning or proviso of specific stipulation, condition or limitation provoke: stimulate or give rise to (a reaction or emotion, typically a strong or unwelcome one) in someone. tilde: ~ compliment: a polite expression of praise or admiration. benchmark: a standard or point of reference against which things may be compared or assessed. tension: the state of being stretched tight. vengeance: revenge conviction: a formal declaration that someone is guilty of a criminal offense, made by the verdict of a jury or the decision of a judge in a court of law. jeopardize: put (someone or something) into a situation in which there is a danger of loss, harm, or failure. neologism: a newly coined word or expression. hostile: unfriendly; antagonistic. Phrase What is meant by sth?? get traction: gain public recognition or acceptance think of … as Other useful link Name of punctuation mark]]></content>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell]]></title>
    <url>%2F2017%2F08%2F10%2Fshell%2F</url>
    <content type="text"><![CDATA[I have been using shell for quite a while, but sometimes I still need to search on google to find some very basic settings for shell, like adding a application to environment varibale. It is quite time consuming and unefficient. Therefore, I decided to make a cheatsheet to move these fragment knowledge into one place, so that I can easily find them in the future. Cli For ShellGet current shell1$ echo $SHELL Change default shellList all installed shellechsh -l does not work for me, so I choose another way: 1cat /etc/shells Change the default shell123chsh /full/path/to/shellchsh /bin/zsh Determine if it is a login shell12345if [[ -o login ]]; then print yeselse print nofi Config ShellStart filesWhen starting Zsh, it will source the following files in this order by default: /etc/zsh/zshenv: Used for setting system-wide environment variables; it should not contain commands that produce output or assume the shell is attached to a tty. This file will always be sourced, this cannot be overridden. $ZDOTDIR/.zshenv: Used for setting user’s environment variables; it should not contain commands that produce output or assume the shell is attached to a tty. This file will always be sourced. /etc/zsh/zprofile: Used for executing commands at start, will be sourced when starting as a login shell. Please note that on Arch Linux, by default it contains one line which source the /etc/profile /etc/profile: This file should be sourced by all Bourne-compatible shells upon login: it sets up $PATH and other environment variables and application-specific (/etc/profile.d/*.sh) settings upon login. $ZDOTDIR/.zprofile: Used for executing user’s commands at start, will be sourced when starting as a login shell. /etc/zsh/zshrc: Used for setting interactive shell configuration and executing commands, will be sourced when starting as an interactive shell. $ZDOTDIR/.zshrc: Used for setting user’s interactive shell configuration and executing commands, will be sourced when starting as an interactive shell. /etc/zsh/zlogin: Used for executing commands at ending of initial progress, will be sourced when starting as a login shell. $ZDOTDIR/.zlogin: Used for executing user’s commands at ending of initial progress, will be sourced when starting as a login shell. $ZDOTDIR/.zlogout: Will be sourced when a login shell exits. /etc/zsh/zlogout: Will be sourced when a login shell exits. Config $PATHNormally, the path should be set in ~/.zshenv, but Arch Linux sources /etc/profile after sourcing ~/.zshenv.To prevent your $PATH being overwritten, set it in ~/.zprofile. 1export PATH=/home/david/pear/bin:$PATH Set environment variablesActually you can directly run 1JAVA_HOME = /path/to/jdk to set JAVA_HOME as env virable and call it by 12345$JAVA_HOMEe.g. echo $JAVA_HOME However, the env virable is temperary in this way and if we want to set a permanent env virable. we need to set it in .zprofile Get where is the command come fromTake ls as example 1whereis ls and 1/bin/ls will be returned. If we try to use type command 1type ls it will return 1ls is an alias for ls -G to us Set up alias1alias tailmyless='cd /home/myuser/public_html/less &amp;&amp; lessc -c style.less &gt; ../style.css &amp;&amp; cd ../ &amp;&amp; tail style.css' We can run this command directly in the shell or write it into zsh source file to make it accessible globally. History search]]></content>
      <tags>
        <tag>Cli</tag>
        <tag>Shell</tag>
        <tag>Zsh</tag>
        <tag>Bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux Cli Cheatsheet]]></title>
    <url>%2F2017%2F08%2F10%2Flinux-cli-cheatsheet%2F</url>
    <content type="text"><![CDATA[grep - search words in filesThe grep command syntax1234567grep 'word' filenamegrep 'word' file1 file2 file3grep 'string1 string2' filenamecat otherfile | grep 'something'command | grep 'something'command option1 | grep 'data'grep --color 'data' fileName Ignore the caseUse -i option 1grep -i "boo" /etc/passwd Use grep recursively12345grep -r "192.168.1.5" /etc/orgrep -R "192.168.1.5" /etc/ Suppress the file name12345grep -hR "192.168.1.5" /etc/orgrep -hR "192.168.1.5" /etc/ Search for words onlySearch one word1grep -w "boo" file Use grep to search 2 different words1egrep -w 'word1|word2' /path/to/file Count line when words has been matchedThe grep can report the number of times that the pattern has been matched for each file using -c (count) option: 1grep -c 'word' /path/to/file Pass the -n option to precede each line of output with the number of the line in the text file from which it was obtained: 1grep -n 'root' /etc/passwd List the matching filesUse the -l option to list file name whose contents mention main(): 1grep -l 'main' *.c Finally, you can force grep to display output in colors, enter: 1grep --color vivek /etc/passwd Grep invert matchYou can use -v option to print inverts the match; that is, it matches only those lines that do not contain the given word. For example print all line that do not contain the word bar: 1grep -v bar /path/to/file Use pipe to grepDisplay cpu model name: 1cat /proc/cpuinfo | grep -i 'Model' find - find files in directoriesPlease refer this article if you want to get more details:Find Files in Linux, Using the Command Line Basic exmpalesFind a file called testfile.txt in current and sub-directories. 1find . -name testfile.txt Find all ·.jpg· files in the /home and sub-directories. 1find /home -name '*.jpg Find an empty file within the current directory. 1find . -type f -empty Find all .db files (ignoring text case) modified in the last 7 days by a user named exampleuser. 1find /home -user exampleuser -mtime 7 -iname ".db" Use Grep to Find Files Based on ContentThis searches every object in the current directory hierarchy (.) that is a file (-type f) and then runs the command grep &quot;example&quot; for every file that satisfies the conditions. The files that match are printed on the screen (-print). The curly braces ({}) are a placeholder for the find match results. The {} are enclosed in single quotes (&#39;) to avoid handing grep a malformed file name. The -exec command is terminated with a semicolon (;), which should be escaped (\;) to avoid interpretation by the shell. 1find . -type f -exec grep "example" '&#123;&#125;' \; -print How to Find and Process Files Using the Find CommandThe -exec option runs commands against every object that matches the find expression. Consider the following example: 1find . -name "rc.conf" -exec chmod o+r '&#123;&#125;' \; rsyncPlease refer this article if you want to get more details:Rsync (Remote Sync): 10 Practical Examples of Rsync Command in Linux Basic syntax of rsync command1rsync options source destination Some common options used with rsync commands -v : verbose -r : copies data recursively (but don’t preserve timestamps and permission while transferring data) -a : archive mode, archive mode allows copying files recursively and it also preserves symbolic links, file permissions, user &amp; group ownerships and timestamps -z : compress file data -h : human-readable, output numbers in a human-readable format Copy a Directory from Local Server to a Remote Server1rsync -avz rpmpkgs/ root@192.168.0.101:/home/ Copy/Sync a Remote Directory to a Local Machine1rsync -avzh root@192.168.0.100:/home/tarunika/rpmpkgs /tmp/myrpms FunctionThe function format is quite simple, but one thing need to be remembered. The args of function is “$@”. This is all of the args and if you want to get each arg, you can get them by index but the this index starts from 1 but not 0. Sync from remote 123syncFromRemote () &#123; rsync -avzh root@192.168.0.100:"$@" ~/reports/&#125; Compare two number 12345678compare () &#123; if [ "$@[1]" -gt "$@[2]" ] then echo "larger" else echo "smaller" fi&#125;]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Cli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Date and Calendar]]></title>
    <url>%2F2017%2F08%2F10%2Fjava-date-n-calendar%2F</url>
    <content type="text"><![CDATA[How to convert a LocalDateTime to Date1Date date = Date.from(localDateTime.atOffset(ZoneOffset.UTC).toInstant()); Parse a String to Date Parse by DateFormat - SimpleDateFormat When we use public Date parse(String source), if the begining of the parameter cannot be parsed, it will throw a ParseException, otherwise return a Date If we choose public abstract Date parse(String source, ParsePosition pos), it will return null when the string cannot be parsed without throw Exception. Pattern of formatter The default format pattern of SimpleDateFormat is **&quot;M/d/yy h:mm a&quot;**, while the default pattern of Date.toString() is **&quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;**. To parse the Date correctly we need to construct the StringDateFormat with `SimpleDateFormat formatter = new SimpleDateFormat(&quot;EEE MMM dd HH:mm:ss zzz yyyy&quot;);` Parse a String to LocalDateTimeWe can use static method parse in LocalDateTime.parse to parse the stringLocalDateTime localDateTime = LocalDateTime.parse(dateString); The input String format should be uuuu-MM-dd’T’HH:mm uuuu-MM-dd’T’HH:mm:ss uuuu-MM-dd’T’HH:mm:ss.SSS uuuu-MM-dd’T’HH:mm:ss.SSSSSS uuuu-MM-dd’T’HH:mm:ss.SSSSSSSSS]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Useful Website]]></title>
    <url>%2F2017%2F08%2F10%2Fuseful-site%2F</url>
    <content type="text"><![CDATA[Source JSONPlaceholder: Fake Online REST API for Testing and Prototyping Yestone: 图片字体素材库 Image sources and tutorials]]></content>
      <tags>
        <tag>Info</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack]]></title>
    <url>%2F2017%2F08%2F10%2Fwebpack%2F</url>
    <content type="text"><![CDATA[webpack is a module bundler By stating what dependencies a module needs, webpack can use this information to build a dependency graph. It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order. Also unused dependencies will not be included in the bundle. What are loaders?Loaders are transformations that are applied on a resource file of your app. They are functions (running in node.js) that take the source of a resource file as the parameter and return the new source. For example, you can use loaders to tell webpack to load CoffeeScript or JSX.1234567891011121314module: &#123; loaders: [ &#123; test: /\.json$/, include: __dirname + '/client', loader: 'json-loader' &#125;, &#123; test: /\.js$/, exclude: /node_modules/, loaders: ['react-hot', 'babel'] &#125; ]&#125; What is JSXJSX is a preprocessor step that adds XML syntax to JavaScript. You can definitely use React without JSX but JSX makes React a lot more elegant. Just like XML, JSX tags have a tag name, attributes, and children. If an attribute value is enclosed in quotes, the value is a string. Otherwise, wrap the value in braces and the value is the enclosed JavaScript expression. 123456789101112&lt;div className="red"&gt;Children Text&lt;/div&gt;;&lt;MyCounter count=&#123;3 + 5&#125; /&gt;;// Here, we set the "scores" attribute below to a JavaScript object.var gameScores = &#123; player1: 2, player2: 5&#125;;&lt;DashboardUnit data-index="2"&gt; &lt;h1&gt;Scores&lt;/h1&gt; &lt;Scoreboard className="results" scores=&#123;gameScores&#125; /&gt;&lt;/DashboardUnit&gt;;]]></content>
      <tags>
        <tag>Webpack</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sass]]></title>
    <url>%2F2017%2F08%2F10%2Fsass%2F</url>
    <content type="text"><![CDATA[##Variables Sass uses the $ symbol to make something a variable. 1234567$font-stack: Helvetica, sans-serif;$primary-color: #333;body &#123; font: 100% $font-stack; color: $primary-color;&#125; NestingSass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice.123456789101112131415nav &#123; ul &#123; margin: 0; padding: 0; list-style: none; &#125; li &#123; display: inline-block; &#125; a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125;&#125; Partials and ImportCSS has an import option that lets you split your CSS into smaller, more maintainable portions. The only drawback is that each time you use @import in CSS it creates another HTTP request. 123456789// _reset.scsshtml,body,ul,ol &#123; margin: 0; padding: 0;&#125; 12345678// base.scss@import 'reset';body &#123; font: 100% Helvetica, sans-serif; background-color: #efefef;&#125; Notice we’re using @import &#39;reset&#39;; in the base.scss file. When you import a file you don’t need to include the file extension .scss. MixinsTo create a mixin you use the @mixin directive and give it a name. We’ve named our mixin border-radius. We’re also using the variable $radius inside the parentheses so we can pass in a radius of whatever we want. After you create your mixin, you can then use it as a CSS declaration starting with @include followed by the name of the mixin. 12345678@mixin border-radius($radius) &#123; -webkit-border-radius: $radius; -moz-border-radius: $radius; -ms-border-radius: $radius; border-radius: $radius;&#125;.box &#123; @include border-radius(10px); &#125; Extend/InheritanceThis is one of the most useful features of Sass. Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your Sass very DRY. In our example we’re going to create a simple series of messaging for errors, warnings and successes. 1234567891011121314151617181920.message &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; @extend .message; border-color: green;&#125;.error &#123; @extend .message; border-color: red;&#125;.warning &#123; @extend .message; border-color: yellow;&#125; OperatorsDoing math in your CSS is very helpful. Sass has a handful of standard math operators like +, -, *, /, and %. In our example we’re going to do some simple math to calculate widths for an aside &amp; article. 123456789101112.container &#123; width: 100%; &#125;article[role="main"] &#123; float: left; width: 600px / 960px * 100%;&#125;aside[role="complementary"] &#123; float: right; width: 300px / 960px * 100%;&#125;]]></content>
      <tags>
        <tag>Sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React and Redux]]></title>
    <url>%2F2017%2F08%2F10%2Freact-n-redux%2F</url>
    <content type="text"><![CDATA[Origin Resourse from Building a Simple CRUD App with React + Redux The advantage of ReactReact is fast. It uses the virtual DOM to track the state of the actual DOM, only re-rendering discrete sections of the DOM as changes to application state dictate. But where I really started to see the advantages of React was in the flow of data through the application, in the purely Data Down Actions Up system of maintaining application state.In React, your components can have both state and properties. A component’s properties should be considered immutable. Instead of a component responding to a user’s action by updating it’s own properties, it will send an action that updates the entire application’s state, which in turn triggers a re-render of a component, updating that component’s properties as a result.]]></content>
      <tags>
        <tag>React</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB Cli]]></title>
    <url>%2F2017%2F08%2F10%2Fmongodb-cli%2F</url>
    <content type="text"><![CDATA[Mongodb operation show all the dbs 1show dbs show all the collections in db 1show collections show all data in specific db 1db.DATABASE_NAME.find().pretty() create a databse 1use DATABASE_NAME drop a database 1db.dropDatabase() create collection 1db.createCollection(name, options) drop collection 1db.COLLECTION_NAME.drop() insert data 12db.COLLECTION_NAME.insert(document)db.collection.insertMany([documents]) 123456789db.mycol.insert(&#123; _id: ObjectId(7df78ad8902c), title: 'MongoDB Overview', description: 'MongoDB is no sql database', by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100&#125;) query data 123456789101112131415161718192021222324db.mycol.find().pretty()db.mycol.find(&#123;"by":"tutorials point"&#125;).pretty()db.mycol.find(&#123;"likes":&#123;$lt:50&#125;&#125;).pretty()db.mycol.find(&#123;"likes":&#123;$lte:50&#125;&#125;).pretty()db.mycol.find(&#123;"likes":&#123;$gt:50&#125;&#125;).pretty()db.mycol.find(&#123;"likes":&#123;$gte:50&#125;&#125;).pretty()db.mycol.find(&#123;"likes":&#123;$ne:50&#125;&#125;).pretty()b.mycol.find( &#123; $and: [ &#123;key1: value1&#125;, &#123;key2:value2&#125; ] &#125;).pretty()db.mycol.find( &#123; $or: [ &#123;key1: value1&#125;, &#123;key2:value2&#125; ] &#125;).pretty() update data 12345678910db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)db.mycol.update(&#123;'title':'MongoDB Overview'&#125;,&#123;$set:&#123;'title':'New MongoDB Tutorial'&#125;&#125;)db.mycol.save( &#123; "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point New Topic", "by":"Tutorials Point" &#125;) delete documentremove one 1db.COLLECTION_NAME.remove(DELETION_CRITERIA,1) remove all 1db.mycol.drop() projection 1db.COLLECTION_NAME.find(&#123;&#125;,&#123;KEY:1&#125;) limit 12db.COLLECTION_NAME.find().limit(NUMBER)db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER) sort 1db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;) index 1db.COLLECTION_NAME.ensureIndex(&#123;KEY:1&#125;) 12345db.users.insertMany([ &#123;item: "lamp", qty: 50, type: "desk" &#125;, &#123;item: "lamp", qty: 20, type: "floor" &#125;, &#123;item: "bulk", qty: 100 &#125;]) 1234db.userLocal.insertMany([ &#123;username: "nilge", email: "gexiangy@usc.edu", password: "123456"&#125;, &#123;username: "sophie", email: "huiwenzhe@usc.edu", password: "654321"&#125;])]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Cheatsheet]]></title>
    <url>%2F2017%2F08%2F09%2Fgithub-cli%2F</url>
    <content type="text"><![CDATA[Terminology working directory staging environment repository Create a git local repository and track to a remote repository create a local repository go to the folder that contain the files that we want to add to repository git init: create a local repository add some files into the current directory git add &lt;filename&gt; or git add .: add a file or add all files to the staging environment git commit -m &quot;&lt;commit message&gt;&quot;: commit the files into local repository build a remote repository sign in the github account click + New repository button and create a repository as instruction track the local repository to remote git remote add &lt;alias&gt; &lt;url&gt;: add a remote, &lt;alias&gt; is always set as origin and &lt;url&gt; is the http url copied from github git push -u &lt;alias&gt; &lt;branch&gt;: push the content in the local repository to the remote, here, &lt;alias&gt; is always set as origin and &lt;branch&gt; is the branch that we want to push e.g. master after tracking the local repository to the remote one, we can just use git push to push the commit to the remote Clone a project from github and sync the branches clone the project from remote git clone &lt;url&gt;: to clone the remote repository to local the default setting is only cloning the master branch Sync the branches git checkout -b &lt;local branch name&gt; &lt;alias&gt;/&lt;remote branch name&gt; clone a branch from github, e.g. git checkout -b sched_mutex origin/sched_mutex if we want to sync all the branch at one time we can use the following command 123git clone --mirror https://github.com/NilGE/weenix.git .gitgit config --bool core.bare falsegit reset --hard only clone one specific branch git clone -b &lt;branch_name&gt; &lt;url&gt; Fetch, merge and pull git fetch &lt;alias&gt;: fetch from remote git merge &lt;other branch&gt;: merge other branch to the current branch, the other branch can be a remote branch how to solve the conflict: //TODO: git pull: git fetch + git merge StashPlease refer: Git stash git stash: stash (1) changes that have been added to your index (staged changes), (2) changes made to files that are currently tracked by Git (unstaged changes) git stash -u: also stash untracked files git stash pop: popping your stash removes the changes from your stash and reapplies them to your working copy. Recover git checkout &lt;filename&gt;: if we modify some files and we do not stage it, we can use this command to go back to the file’s previous staging version git reset HEAD &lt;filename&gt;: unstage the file git checkout &lt;branch/file/SHA1&gt;: make the working directory is look like what the repsository look like for the given parameter git checkout --index.html: --means stay in current branch git ls-files --deleted -z | xargs -0 git rm: remove all deleted files git reset --hard HEAD: go back to last commit git reset --hard &lt;SHA1&gt;: go back to specific commit git add -u: update all your changes git reset HEAD~: undo the last commit git clean [-f]: remove files that are not tracked, The -f (force) option will also remove files, that are not tracked and are also being ignored by git though ignore-rule. find . -name &#39;*Email*&#39; -exec git checkout {} \;: checkout all the files that contains Email in its pathname in the current folder and its subfolder. Amend git commit --amend: Combine the staged changes with the previous commit and replace the previous commit with the resulting snapshot. Running this when there is nothing staged lets you edit the previous commit’s message without altering its snapshot. Diff git diff &lt;filename&gt;: check the different between staging and working directory git diff [file_name] --staged: check the different between repository and staging git diff branch1..branch2: compare the difference between two branches Rebase put my commit on the top of all commits 12345# make sure the repo is the updated onegit pull# put my commit on top of the othersgit rebase first we have serval commits 1234567e19a59e change 35c02763 change 29cc0c67 change 15f71846 second commit8e2e1ee change sixe8b2bfe change total fivedc2da89 first commit we want to merge the last three use command git rebase -i HEAD~3 A file popup with the content 12345678910111213141516171819202122pick 9cc0c67 change 1pick 5c02763 change 2pick e19a59e change 3# Rebase 5f71846..e19a59e onto 5f71846 (3 command(s))## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like "squash", but discard this commit's log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit## These lines can be re-ordered; they are executed from top to bottom.## If you remove a line here THAT COMMIT WILL BE LOST.## However, if you remove everything, the rebase will be aborted.## Note that empty commits are commented out we change the commands with direction, so that we can squash all three commits to one and rename the commit 123reword 9cc0c67 change 1squash 5c02763 change 2squash e19a59e change 3 Another file popup and we can rename the commit here change 1change 1 to 1total change three The confirmation file popup and after we close it, we finish rebasing 1234538e2f09 total change three5f71846 second commit8e2e1ee change sixe8b2bfe change total fivedc2da89 first commit PatchThe goal of patching is patch serveral commits from one branch and apply the patch to another branch We first have several commits in master branch 1234538e2f09 total change three5f71846 second commit8e2e1ee change sixe8b2bfe change total fivedc2da89 first commit Then we create a new branch ‘newbranch’ and make several commits 1git checkout -b newbranch 123456786700a4d change 3c345e71 change 2fac8e80 change 138e2f09 total change three5f71846 second commit8e2e1ee change sixe8b2bfe change total fivedc2da89 first commit we patch the last three commits with command 1git format-patch master --stdout &gt; last_three.patch The above command means we patch the result of diff between current branch and master branch and combine all the commits into one patches If we only write git format-patch master, we will create three patches We can change master with SHA1, so that we can make the patch from any commit Check the content of the patch 1git apply --stat last_three.patch If we don’t get any errors, the patch can be applied cleanly. Otherwise we may see what trouble we’ll run into. Checkout to master branch and apply this patch 12git checkout mastergit am --signoff &lt; last_three.patch 123Applying: change 1Applying: change 2Applying: change 3 Log and Status Log 123git loggit log --onelinegit log --graph status 1git status Get status on all repos in folder1find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo &#123;&#125; &amp;&amp; cd &#123;&#125; &amp;&amp; git status -s &amp;&amp; echo)' \; From the containing folder, execute this command and it will list the status of each repo in that folder. How it works: find . : to find everything in the current folder -maxdepth 1 : so that it doesn’t recurse into subdirs of the repos -mindepth 1 : so that it skips the current directory (of depth 0) -type d : only find directories -exec sh -c : spawn a shell and give it a command ‘(echo {} &amp;&amp; cd {} &amp;&amp; git status &amp;&amp; echo)’ : the command given to the shell echo {} : echo the directory found by find cd {} : cd into the directory found by find git status -s : run the actual git status, with the -s (short) option echo : echo an empty line, for readability \; : semicolon to run shell for each of the found directories instead of passing them all to one shell as arguments Set this command as alias in .zprofile 1alias stall="find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(echo &#123;&#125; &amp;&amp; cd &#123;&#125; &amp;&amp; git status -s &amp;&amp; echo)' \;" Ignore changes to committed filesTemporarily ignore changesDuring development it’s convenient to stop tracking file changes to a file committed into your git repo. This is very convenient when customizing settings or configuration files that are part of your project source for your own work environment. 1git update-index --assume-unchanged &lt;file&gt; Resume tracking files with: 1git update-index --no-assume-unchanged &lt;file&gt; Permanently ignore changes to a fileIf a file is already tracked by Git, adding that file to your .gitignore is not enough to ignore changes to the file. You also need to remove the information about the file from Git’s index: These steps will not delete the file from your system. They just tell Git to ignore future updates to the file. Add the file in your .gitignore. Run the following: 1git rm --cached &lt;file&gt; Commit the removal of the file and the updated .gitignore to your repo. This will be helpful when we accidentally commit a file taht should be ignored How to track a remote branch to local branch12git fetchgit branch --track branch-name origin/branch-name Try not to create a local branch first because it will cause a conflict How to solve fatal: refusing to merge unrelated histories]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
